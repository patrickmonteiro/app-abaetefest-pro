// scripts/build-pwa.js - Script para garantir build PWA correto
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando build PWA customizado...');

// Fun√ß√£o para verificar se arquivo existe
const fileExists = (filePath) => {
  return fs.existsSync(filePath);
};

// Fun√ß√£o para copiar arquivo
const copyFile = (src, dest) => {
  if (fileExists(src)) {
    fs.copyFileSync(src, dest);
    console.log(`‚úÖ Copiado: ${src} ‚Üí ${dest}`);
    return true;
  }
  console.warn(`‚ö†Ô∏è Arquivo n√£o encontrado: ${src}`);
  return false;
};

// Fun√ß√£o para criar arquivo se n√£o existir
const ensureFile = (filePath, content) => {
  if (!fileExists(filePath)) {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Criado: ${filePath}`);
    return true;
  }
  return false;
};

// 1. Executar build normal do Nuxt
console.log('\nüì¶ Executando build do Nuxt...');
try {
  execSync('npm run generate', { stdio: 'inherit' });
  console.log('‚úÖ Build do Nuxt conclu√≠do');
} catch (error) {
  console.error('‚ùå Erro no build do Nuxt:', error.message);
  process.exit(1);
}

// 2. Verificar estrutura de diret√≥rios
const distDir = path.join(process.cwd(), 'dist');
const publicDir = path.join(process.cwd(), 'public');

if (!fs.existsSync(distDir)) {
  console.error('‚ùå Diret√≥rio dist n√£o encontrado ap√≥s build');
  process.exit(1);
}

console.log('\nüîç Verificando arquivos PWA...');

// 3. Verificar manifest
const manifestPaths = [
  path.join(distDir, 'manifest.webmanifest'),
  path.join(distDir, 'manifest.json')
];

let manifestFound = false;
for (const manifestPath of manifestPaths) {
  if (fileExists(manifestPath)) {
    console.log(`‚úÖ Manifest encontrado: ${path.basename(manifestPath)}`);
    
    // Verificar conte√∫do do manifest
    try {
      const manifestContent = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
      const requiredFields = ['name', 'short_name', 'start_url', 'icons'];
      const missingFields = requiredFields.filter(field => !manifestContent[field]);
      
      if (missingFields.length > 0) {
        console.warn(`‚ö†Ô∏è Campos obrigat√≥rios ausentes no manifest: ${missingFields.join(', ')}`);
      } else {
        console.log('‚úÖ Manifest v√°lido com todos os campos obrigat√≥rios');
      }
    } catch (error) {
      console.error('‚ùå Erro ao ler manifest:', error.message);
    }
    
    manifestFound = true;
    break;
  }
}

if (!manifestFound) {
  console.error('‚ùå Nenhum manifest encontrado ap√≥s build');
  
  // Criar manifest de emerg√™ncia
  const emergencyManifest = {
    name: 'AbaetefestPro - Festival Management',
    short_name: 'AbaetefestPro',
    description: 'Aplica√ß√£o completa para gerenciamento de festivais com tecnologia PWA',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#3b82f6',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
        purpose: 'any maskable'
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
        purpose: 'any maskable'
      }
    ]
  };
  
  const emergencyManifestPath = path.join(distDir, 'manifest.webmanifest');
  fs.writeFileSync(emergencyManifestPath, JSON.stringify(emergencyManifest, null, 2));
  console.log('üÜò Manifest de emerg√™ncia criado');
}

// 4. Verificar Service Worker
const swPaths = [
  path.join(distDir, 'sw.js'),
  path.join(distDir, 'service-worker.js')
];

let swFound = false;
for (const swPath of swPaths) {
  if (fileExists(swPath)) {
    console.log(`‚úÖ Service Worker encontrado: ${path.basename(swPath)}`);
    swFound = true;
    break;
  }
}

if (!swFound) {
  console.warn('‚ö†Ô∏è Service Worker n√£o encontrado ap√≥s build');
}

// 5. Verificar √≠cones obrigat√≥rios
const requiredIcons = ['192x192', '512x512'];
const optionalIcons = ['72x72', '96x96', '128x128', '144x144', '152x152', '384x384'];
const allIcons = [...requiredIcons, ...optionalIcons];

console.log('\nüé® Verificando √≠cones...');

for (const size of allIcons) {
  const iconName = `icon-${size}.png`;
  const publicIconPath = path.join(publicDir, iconName);
  const distIconPath = path.join(distDir, iconName);
  const isRequired = requiredIcons.includes(size);
  
  if (fileExists(publicIconPath)) {
    // Copiar √≠cone para dist se n√£o existir
    if (!fileExists(distIconPath)) {
      copyFile(publicIconPath, distIconPath);
    } else {
      console.log(`‚úÖ √çcone ${size}: OK`);
    }
  } else {
    const message = `‚ùå √çcone ${size}: N√£o encontrado`;
    if (isRequired) {
      console.error(message + ' (OBRIGAT√ìRIO)');
    } else {
      console.warn(message + ' (opcional)');
    }
  }
}

// 6. Garantir outros arquivos importantes
const importantFiles = [
  { src: 'favicon.ico', required: true },
  { src: 'robots.txt', required: false }
];

console.log('\nüìÑ Verificando arquivos importantes...');

for (const file of importantFiles) {
  const publicPath = path.join(publicDir, file.src);
  const distPath = path.join(distDir, file.src);
  
  if (fileExists(publicPath)) {
    if (!fileExists(distPath)) {
      copyFile(publicPath, distPath);
    } else {
      console.log(`‚úÖ ${file.src}: OK`);
    }
  } else if (file.required) {
    console.error(`‚ùå ${file.src}: Obrigat√≥rio mas n√£o encontrado`);
  } else {
    console.log(`‚ÑπÔ∏è ${file.src}: Opcional, n√£o encontrado`);
  }
}

// 7. Verificar estrutura _nuxt
const nuxtDir = path.join(distDir, '_nuxt');
if (fs.existsSync(nuxtDir)) {
  const nuxtFiles = fs.readdirSync(nuxtDir);
  console.log(`‚úÖ Diret√≥rio _nuxt com ${nuxtFiles.length} arquivos`);
} else {
  console.warn('‚ö†Ô∏è Diret√≥rio _nuxt n√£o encontrado');
}

// 8. Criar arquivo de verifica√ß√£o
const verificationData = {
  buildTime: new Date().toISOString(),
  nodeVersion: process.version,
  manifestFound,
  swFound,
  iconsStatus: {
    required: requiredIcons.map(size => ({
      size,
      exists: fileExists(path.join(distDir, `icon-${size}.png`))
    })),
    optional: optionalIcons.map(size => ({
      size,
      exists: fileExists(path.join(distDir, `icon-${size}.png`))
    }))
  }
};

const verificationPath = path.join(distDir, 'pwa-verification.json');
fs.writeFileSync(verificationPath, JSON.stringify(verificationData, null, 2));
console.log('\nüìã Arquivo de verifica√ß√£o criado: pwa-verification.json');

// 9. Relat√≥rio final
console.log('\nüìä === RELAT√ìRIO FINAL ===');
console.log(`‚úÖ Build conclu√≠do em: ${distDir}`);
console.log(`üìÑ Manifest: ${manifestFound ? 'OK' : 'ERRO'}`);
console.log(`‚öôÔ∏è Service Worker: ${swFound ? 'OK' : 'AVISO'}`);

const requiredIconsOK = requiredIcons.every(size => 
  fileExists(path.join(distDir, `icon-${size}.png`))
);
console.log(`üé® √çcones obrigat√≥rios: ${requiredIconsOK ? 'OK' : 'ERRO'}`);

const optionalIconsCount = optionalIcons.filter(size =>
  fileExists(path.join(distDir, `icon-${size}.png`))
).length;
console.log(`üé® √çcones opcionais: ${optionalIconsCount}/${optionalIcons.length}`);

// 10. Comandos de teste sugeridos
console.log('\nüß™ === COMANDOS DE TESTE ===');
console.log('Para testar localmente:');
console.log('  npx http-server dist -p 3000 -o');
console.log('');
console.log('Para validar PWA:');
console.log('  npx lighthouse http://localhost:3000 --only-categories=pwa');
console.log('');
console.log('Para testar manifest:');
console.log('  curl -I http://localhost:3000/manifest.webmanifest');

// 11. Avisos importantes
const hasErrors = !manifestFound || !requiredIconsOK;
if (hasErrors) {
  console.log('\n‚ö†Ô∏è === ATEN√á√ÉO ===');
  if (!manifestFound) {
    console.log('‚ùå MANIFEST: N√£o encontrado ou inv√°lido');
    console.log('   Solu√ß√£o: Verificar configura√ß√£o do @vite-pwa/nuxt');
  }
  if (!requiredIconsOK) {
    console.log('‚ùå √çCONES: Faltam √≠cones obrigat√≥rios (192x192, 512x512)');
    console.log('   Solu√ß√£o: Executar "npm run pwa:icons" e criar os PNGs');
  }
  console.log('');
  console.log('PWA pode n√£o funcionar corretamente at√© resolver estes problemas!');
  process.exit(1);
} else {
  console.log('\nüéâ === SUCESSO ===');
  console.log('Build PWA conclu√≠do com sucesso!');
  console.log('Todos os arquivos obrigat√≥rios est√£o presentes.');
  console.log('');
  console.log('Pr√≥ximos passos:');
  console.log('1. Deploy para servidor HTTPS');
  console.log('2. Testar instala√ß√£o em dispositivos reais');
  console.log('3. Validar com Lighthouse PWA audit');
}

console.log('\nüöÄ Build PWA finalizado!');